<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Flow on Blog by Stisa</title>
    <link>http://blog.tisato.me/tags/flow/</link>
    <description>Recent content in Flow on Blog by Stisa</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>eu</language>
    <lastBuildDate>Fri, 02 Oct 2015 22:36:29 +0200</lastBuildDate>
    <atom:link href="http://blog.tisato.me/tags/flow/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Luxe/Flow Hooks Example</title>
      <link>http://blog.tisato.me/articles/luxe-hooks/</link>
      <pubDate>Fri, 02 Oct 2015 22:36:29 +0200</pubDate>
      
      <guid>http://blog.tisato.me/articles/luxe-hooks/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;m playing around with &lt;a href=&#34;http://luxeengine.com/&#34;&gt;luxe&lt;/a&gt;, building a simple depth first search-based maze generator, which I plan on turning into a full game ( btw you can try it &lt;a href=&#34;http://blog.tisato.me/mazes/&#34;&gt;here&lt;/a&gt; ).&lt;br /&gt;
While iterating, I had to copy-paste the content of &lt;code&gt;bin/web/&lt;/code&gt; to the folder linked with the project &lt;a href=&#34;https://github.com/stisa/mazes&#34;&gt;git repo&lt;/a&gt;, but it got old fast, and I &lt;strong&gt;had&lt;/strong&gt; to find a faster way.&lt;br /&gt;
At first, I tried using the  &lt;code&gt;--output-path &amp;lt;path&amp;gt;&lt;/code&gt; flag in &lt;code&gt;flow&lt;/code&gt;, that overrides the flow tree &lt;code&gt;project.app.output&lt;/code&gt; path. The problem with this method is that flow generates two folders, &lt;code&gt;web&lt;/code&gt; and &lt;code&gt;web.build&lt;/code&gt;, inside your selected path, and I didn&amp;rsquo;t like it very much.&lt;br /&gt;
That&amp;rsquo;s when I found out about hooks, digging trough &lt;code&gt;flow&lt;/code&gt; source code.&lt;/p&gt;

&lt;h3 id=&#34;hooks:9ae4c02ba277f90b870406f3e1b45dc8&#34;&gt;Hooks&lt;/h3&gt;

&lt;p&gt;flow has the ability of launching node.js scripts before ( &lt;strong&gt;pre&lt;/strong&gt; ) and after ( &lt;strong&gt;post&lt;/strong&gt; ) building and running your project.&lt;br /&gt;
This gave me the option of using a simple script to copy the output of the build to another folder, without having to copy-paste manually every time.&lt;/p&gt;

&lt;p&gt;To use hooks, you have to add them to your &lt;code&gt;project.flow&lt;/code&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clike&#34;&gt;  build : {
    dependencies : {
      //your dependencies
    },
    post : {  
      priority : 1,
      name : &#39;copy-to-gh-pages&#39;,
      desc : &#39;copy bin/web to gh-pages&#39;,
      script : &#39;./hooks/post.js&#39;,
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;post&lt;/code&gt; is when to run the hook&lt;/li&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt; is the name of your hook&lt;/li&gt;
&lt;li&gt;&lt;code&gt;desv&lt;/code&gt; is the description for your hook&lt;/li&gt;
&lt;li&gt;&lt;code&gt;script&lt;/code&gt; is the path to your script, relative to your project folder root&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then you have to write your script, in my case &lt;code&gt;post.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;  var fs = require(&#39;fs-extra&#39;);
  var path = require(&#39;path&#39;);

  exports.hook = function(flow, done){
    // generic json reading function
    function read_json (file_path) {
        var temp;
        //console.log(path.resolve(file_path))
        temp = fs.readFileSync(path.resolve(file_path));
        return JSON.parse(temp);
    };

    //read our config file
    var config_file = &amp;quot;./hooks/config.json&amp;quot;;

    var config = read_json(config_file);
    var dirs = config.dirs;

    console.log(&amp;quot;copy-to-gh-pages - Source dir: &amp;quot;+ dirs.bin+&amp;quot;, Target dir: &amp;quot;+ dirs.gh_pages);
    fs.copy(dirs.bin,dirs.gh_pages, function copy_site(err){
      if (err) throw err;
      console.log(&amp;quot;copy-to-gh-pages - Project copied&amp;quot;);
      console.log(&amp;quot;copy-to-gh-pages - Copying git_files...&amp;quot;);
      fs.readdir(dirs.git_files,function copy_git_files(err,files){
        if (err) throw err;
        for (var i = 0; i&amp;lt;files.length;i++) {
          var file = files[i];
          console.log(&amp;quot;copy-to-gh-pages -  Copied &amp;quot;+file);
          fs.copy(path.join(dirs.git_files,file),path.join(dirs.gh_pages,file), function copy_file(err){
            if (err) throw err;
          })
        } // for
        done();

      })  // readdir
    })   // copy
  }

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The important bits here are :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;  exports.hook = function(flow, done){
    // do something here...

    // when you&#39;re finished, just say it:
    done();

  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;exports.hook&lt;/code&gt; part allows &lt;code&gt;flow&lt;/code&gt; to call our hook, passing it a &lt;code&gt;flow&lt;/code&gt; object and the &lt;code&gt;done&lt;/code&gt; function.&lt;br /&gt;
Calling &lt;code&gt;done()&lt;/code&gt; signals the build tool that our script is finished executing and that it can go on.&lt;/p&gt;

&lt;p&gt;And that&amp;rsquo;s it, just &lt;code&gt;flow run &amp;lt;target&amp;gt;&lt;/code&gt; your project and watch as your hook does its thing.&lt;/p&gt;

&lt;p&gt;Thanks for reading this, and if you find errors or if I got something wrong, please &lt;a href=&#34;https://github.com/stisa/stisa.github.io&#34;&gt;open an issue on github&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>